A tool for replaying packet captures at the layer 7 level between client and server.

Pre-requisites:
-----------------------------------

    sudo apt-get install python
	sudo pip install dpkt pyyaml

Quick Start - pcap_replay.py
-----------------------------------
Assumptions:
    * We don't have logic for handling out-of-order packets, duplicate packet delivery
    or other, more exotic network behaviors, so it's advisable that any pcaps
    collected under highly reliable networking conditions.
    * If comms are being proxied and the layer 7 content is modified (HTTP headers
    are re-ordered, TLS sessions are re-terminated), then client-server replay
    from pcap will be invalid.
    * Because we use dpkt, pcapng is not supported


Replay a pcap file on the localhost interface:

    1) Start a server, bound to all interfaces, and listening on port 2023:

        ./pcap_replay.py server --store ./pcap --port 2023 --keep

    2) Start the client:

        ./pcap_replay.py client --pcap ./pcap/telnet_moxa_success.pcap  \
                    --control-ip 127.0.0.1 --ip 127.0.0.1 --port 2023

In the above, both the server and client replay the pcap to / from port 2023 on localhost.

Replay a pcap but with a *real* endpoint:

     ./pcap_replay.py client --pcap ./pcap/telnet_moxa_success.pcap  \
                    --ip 192.168.100.107 --port 23 --real

Detailed Description
-----------------------------------
The above will replay the client side of the pcap to a telnet service on the moxa
device on our lab network. Note: use at your own risk as we cannot handle
interactions where the pcap alone is insufficent for capturing client state.

Information about client-server interactions:

    We had the following goals in designing the replay solution:
        * We wanted servers that can run standalone, replaying pcaps, forever,
          without user interaction.
        * We want a pcap_replay server that can service multiple clients,
          replaying a diversity of pcaps, in parallel

To achieve this, we created a very lightweight control protocol. For each replay
session the following must be coordinated via the control protocol:

    * The client IP / source port for the pcap replay (we bind to an IP / port) and then
    inform the server of this binding via the control protocol. 
    * A hash of the PCAP to replay
    * The rate of replay (as specified by the user on the command line)
    * The (zero-based) stream number within the pcap to be replayed

Interaction for the control protocol is specified by the following parameters:

    --control-ip <ipaddress>    # ip of control server
    --control-port <port_num>   # port number of the control server

These parameters can be supplied to the client and the server to specify connection and
bind IP/ports, respectively.

Additionally, while the pcap_replay client takes a pcap as a command line parameter (--pcap),
the pcap_replay server does not know, when started, which pcap to replay. Instead,
the user must supply a directory of pcaps (--store). This pcap should mirror or could be the
same as a directory on the client.

Other options:

    --infinite - in client mode, replays forever. if connections are lost or other
    errors occur, best effort is made to continue attempting to connect / replay

    --keep - in server mode, replays forever. if connections are lost or other
    errors occur, best effort is made to continue attempting to connect / replay

    --rate - floating point value to specify number of layer 7 "plays" to make perr
    second. For instance, in a typical HTTP interaction, this would be the number
    of requests per second for the client and the number of responses per second
    for the server. As we are beholden to the timing of the underlying network
    stacks, the volume of data, and any adverse network conditions, this is done
    on a best effort basis

    --num - the zero-based stream number to be replayed (default is 0)
